{"path":"docs/学校课程/归档课程/编译原理/课件/Chapter_7.pdf","text":"许畅 南京大学计算机系 2024年春季 第七章 运行时刻环境 版权所有 南京大学计算机科学与技术系 许畅 2024春季版 运行时刻环境 • 运行时刻环境 – 为数据分配安排存储位置 – 确定访问变量时使用的机制 – 过程之间的连接、参数传递 – 和操作系统、输入输出设备相关的其它接口 • 主题 – 存储管理：栈分配、堆管理、垃圾回收 – 对变量、数据的访问 2 存储分配的典型方式 • 目标程序的代码放置在代码区 • 静态区、堆区、栈区分别放置不同类型生命期的 数据值 3 静态和动态存储分配 • 静态分配 – 编译器在编译时刻就可以做出存储分配决定，不需要 考虑程序运行时刻的情形 – 全局常量、全局变量 • 动态分配 – 栈式存储：和过程的调用/返回同步进行分配和回收， 值的生命期与过程生命期相同 – 堆存储：数据对象比创建它的过程调用更长寿 • 手工进行回收 • 垃圾回收机制 4 栈式分配 • 内容 – 活动树 – 活动记录 – 调用代码序列 – 栈中的变长数据 5 活动树 • 过程调用 (过程活动) 在时间上总是嵌套的 – 后调用的先返回 – 因此用栈来分配过程活动所需内存空间 • 活动树 (activation tree) – 表示程序运行期间的所有过程活动；每个结点对应于 一个活动，根结点对应于main过程的活动 – 过程p的某次活动对应的结点的所有子结点 • 表示此次活动所调用的各个过程活动 • 从左向右，表示调用的先后顺序 6 活动树的例子 • 快速排序程序 – 过程调用 (返回) 序列和活动 树的前序 (后序) 遍历对应 – 假定当前活动对应结点N， 那么所有尚未结束的活动对 应于N及其祖先结点 7 活动记录 • 过程调用和返回由控制栈 (control stack) 进行管理 • 每个活跃的活动对应于栈 中的一个活动记录 (activation record) • 活动记录按照活动的开始 时间，从栈底到栈顶排列 8 运行时刻栈的例子 • 说明 – a[11]为全局变量 – main无局部变量 – r有局部变量i – q有局部变量i， 和参数m, n 9 r r 调用/返回代码序列 • 调用代码序列 (calling sequence) 为活动记录分配 空间，填写记录中的信息 • 返回代码序列 (return sequence) 恢复机器状态， 使调用者继续运行 • 调用代码序列会分割到调用者和被调用者中 – 根据源语言、目标机器和操作系统的限制，可以有不 同的分割方案 – 把代码尽可能放在被调用者中 10 调用/返回代码序列的要求 • 数据方面 – 能够把参数正确地传递给被调用者 – 能够把返回值传递给调用者 • 控制方面 – 能够正确转到被调用过程的代码开始位置 – 能够正确转回调用者的调用位置 (的下一条指令) • 调用代码序列与活动记录的布局相关 11 活动记录的布局原则 • 原则 – 调用者和被调用者之间传递 的值放在被调用者活动记录 的开始位置 – 固定长度的项 (控制链、访问 链和机器状态字段) 放在中间 位置 – 早期不知道大小的项在活动 记录尾部 – 栈顶指针 (top_sp) 通常指向 固定长度字段的末端 12 调用/返回代码序列的例子 • Calling sequence – 调用者计算实在参数的值 – 将返回地址和原top_sp存放到被调用者的活动记录中； 调用者增加top_sp的值 (越过了调用者的局部数据和临 时变量、以及被调用者的参数和机器状态字段) – 被调用者保存寄存器值和其它状态字段 – 被调用者初始化局部数据，开始运行 • Return sequence – 被调用者将返回值放到与参数相邻的位置 – 被调用者恢复top_sp和其它寄存器，跳转到返回地址 13 调用者/被调用者的活动记录 14 1 2 3 栈中的变长数据 • 如果数据对象的生命 期局限于过程活动的 生命期，就可以分配 在运行时刻栈中 – 变长数组也可以 • top指向实际栈顶 • top_sp用于寻找顶层 记录的定长字段 15 非局部数据的访问 (无嵌套过程) • 没有嵌套过程时的数据访问 – C语言中，每个函数能访问的变量 • 函数的局部变量：相对地址已知，且存放在当前活动记录内， top_sp指针加上相对地址即可访问 • 全局变量：在静态区，地址在编译时刻可知 – 很容易将C语言的函数作为参数进行传递 • 参数中只需包括函数代码的开始地址 • 在函数中访问非局部变量的模式很简单，不需要考虑过程是如 何激活的 16 非局部数据的访问 (有嵌套过程) • PASCAL中，如果过程A的声明中包含了过程B的 声明，那么B可以使用在A中声明的变量 • 当B的代码运行时，如果它使用的是A中的变量， 必须通过访问链访问 17 void A() { int x, y; void B() { int b; x = b + y; } void C() { B(); } C(); B(); } A的活动记录 C的活动记录 B的活动记录 当A调用C，C又调用B时: 当A直接调用B时: A的活动记录 B的活动记录 嵌套深度 • 嵌套深度 (nesting depth) 可根据源程序 静态确定 – 不内嵌于任何 其它过程的过 程，深度为1 – 嵌套于深度为i 的过程的过程， 深度为i + 1 18 深度2：readArray， exchange， quicksort 深度1：sort 深度3：partition 访问链和访问链的使用 • 访问链 (access link) 被用于访问非局部的数据 – 如果过程p在声明时 (直接) 嵌套在过程q中，那么p活动 记录中的访问链指向上层最近的q的活动记录 – 从栈顶活动记录开始，访问链形成了一个链路，嵌套 深度沿着链路逐一递减 • 设深度为np的过程p访问变量x，而变量x在深度为 nq的过程q中声明 – np – nq在编译时刻已知；从当前活动记录出发，沿访问 链前进np – nq次找到活动记录 – x相对于这个活动记录的偏移量在编译时刻已知 19 访问链的维护 • 当过程q调用过程p时 – p的深度大于q：根据作用域规则，p必然在q中直接定 义；那么p的访问链指向当前活动记录 (即q) • 例如：sort调用quicksort(1, 9) – 递归调用p = q：新活动记录的访问链等于当前记录的 访问链 (即和前一个q指向同一目标) • 例如：quicksort(1, 9)调用quicksort(1, 3) – p的深度小于等于q的深度：必然有过程r，p直接在r中 定义，而q嵌套在r中；p的访问链指向栈中r的活动记录 • 例如：partition调用exchange 20 访问链的例子 21 访问链的维护 (过程指针型参数) • 在传递过程指针参数时，过程型参数中不仅包含 过程的代码指针 (开始地址)，还包括正确的访问 链 22 显示表 • 用访问链访问数据，访问开销与嵌套深度差有关 – 使用显示表可以提高效率，访问开销为常量 • 显示表 (display)：为每个嵌套深度保留一个指针 – 指针d[i]指向栈中最近的、嵌套深度为i的活动记录 – 如果过程p访问嵌套深度为i的过程q中声明的变量x，那 么d[i]直接指向相应的活动记录 (i在编译时刻已知) • 显示表的维护 – 调用过程p时，在p的活动记录中保存d[np]的值，并将 d[np]设置为当前活动记录 (即p) – 从p返回时，恢复d[np]的值 23 显示表的例子 24 q(1, 9)调用q(1, 3) 时，q的深度为2 q(1, 3)调用p，p 的深度为3 p调用e，e 的深度为2 堆管理 • 堆空间 – 用于存放生命周期不确定、或生存到被明确删除为止 的数据对象 – 例如：new生成的对象可以生存到被delete为止， malloc申请的空间生存到被free为止 • 存储管理器 (memory manager) – 分配/回收堆区空间的子系统 – 根据语言而定 • C/C++需要手动回收空间 • Java可以自动回收空间 (垃圾收集) 25 存储管理器 • 基本功能 – 分配：为内存请求分配一段连续、适当大小的堆空间 • 首先从空闲的堆空间分配 • 如果不行则从操作系统中获取内存、增加堆空间 – 回收：把被回收的空间返回空闲空间缓冲池，以满足 其它内存需求 • 评价存储管理器的特性 – 空间效率：使程序需要的堆空间最小，即减小碎片 – 程序效率：运用内存系统的层次，使程序运行更快 – 低开销：使分配/收回内存的操作尽可能高效 26 计算机的存储层次结构 • 存储层次结构 (memory hierarchy) 27 程序中的局部性 • 程序具有高度的局部性 (locality) – 时间局部性：一个程序访问的存储位置很可能将在一 个很短的时间段内被再次访问 – 空间局部性：被访问过的存储位置的临近位置很可能 在一个很短的时间段内被访问 • 90%的时间用来执行10%的代码 • 局部性这一特性恰好可以充分利用计算机的层次 存储结构 28 堆空间的碎片问题 • 随着程序分配/回收内存，堆区逐渐被割裂成为若 干空闲存储块 (窗口) 和已用存储块的交错 • 分配一块内存时，通常是把一个窗口的一部分分 配出去，其余部分成为更小的块 • 回收时，被释放的存储块被放回缓冲池；通常要 把连续的窗口接合成为更大的窗口 29 碎片 已分配空间 堆空间分配方法 • Best-fit – 总是将请求的内存分配在满足请求的最小的窗口中 – 好处：可以将大的窗口保留下来，应对更大的请求 • First-fit – 总是将对象放置在第一个能够容纳请求的窗口中 – 放置对象时花费时间较少，但是总体性能较差 – 通常具有较好的数据局部性：同一时间段内生成的对 象经常被分配在连续的空间内 30 使用容器的堆管理方法 • 设定不同大小的块规格，相同的块放入同一容器 • 较小的 (较常用的) 尺寸设置较多的容器 • GNU的C编译器gcc中使用的存储管理器Lea – 空闲块的大小 • 16, 24, 32, 40, … , 512：容器大小为8字节整数倍 • 大于512的按对数划分：每个容器大小是前一容器的两倍 • 荒野块 (wilderness chunk)：可以扩展的内存块 – 分配方法 • 小尺寸的请求，直接在相应容器中找 • 大尺寸的请求，在适当的容器中寻找适当的空闲块 • 可能需要分割内存块，可能需要从荒野块中分割 31 管理和接合空闲空间 • 当回收一个块时，可以把这个块和相邻的块接合 起来，构成更大的块 – 有些管理方法不需要进行接合 • 支持相邻块接合的数据结构 – 边界标记：在每个存储块的两端，分别设置一个 free/used位，并在相邻的位置上存放字节总数 – 双重链接的空闲块列表：列表的指针存放在空闲块中、 用双向指针的方式记录了有哪些空闲块 32 例子 • 相邻的存储块A、B、C – 当回收B时，通过对free/used位的查询，可以知道B左边 的A是空闲的，而C不空闲 – 同时还可以知道A、B合并为长度为300的块 – 修改双重链表，把A替换为A、B接合后的空闲块 • 注意：双重链表中一个结点的前驱并不一定是它 物理上邻近的块 33 处理手工存储管理 • 两大问题 – 内存泄露 (memory-leak)：未能删除不可能再被引用的 数据 – 悬空指针引用 (dangling-pointer-dereference)：引用 已被删除的数据 • 其它问题：访问非法地址 – 空指针访问/数组越界访问 34 垃圾回收 • 垃圾 (garbage) – 广义：不需要再被引用的数据 – 狭义：不能被引用 (不可达) 的数据 • 垃圾回收：自动回收不可达数据的机制，解除了 程序员的负担 – 使用的语言：Lisp、Java、Perl、ML、Modula-3、 Prolog、Smalltalk 35 垃圾回收器的设计目标 • 基本要求 (静态或动态确定数据的类型) – 语言必须类型安全 (typesafe)：保证回收器能够知道数 据元素是否为一个指向某内存块的指针 – 类型不安全 (unsafe) 的语言：C/C++ • 性能目标 – 总体运行时间：不显著增加应用程序的总运行时间 – 停顿时间：当垃圾回收机制启动时，可能引起应用程 序的停顿，这个停顿应该比较短 – 空间使用：最大限度地利用可用内存，避免内存碎片 – 程序局部性：改善空间局部性和时间局部性 36 可达性 • 可达性就是指一个存储块可以被程序访问到 • 根集 (root set) – 不需要指针解引用就可以直接访问的数据 • 可达性 – 根集的成员都是可达的 – 对于任意一个对象，如果指向它的一个指针被保存在 可达对象的某字段或数组元素中，那么这个对象也是 可达的 • 性质 – 一旦一个对象变得不可达，它就不会再变成可达的 37 改变可达对象集合的操作 • 对象分配 – 返回一个指向新存储块的引用 • 参数传递/返回值 – 对象引用从实参传递到形参，从返回值传递给调用者 • 引用赋值：u = v – v的引用被复制到u中，u中原有引用丢失；使u原来指 向的对象变得不可达，并递归使更多对象变得不可达 • 过程返回 – 活动记录出栈，局部变量消失，根集变小，使一些对 象变得不可达 38 垃圾回收方法 • 引用计数垃圾回收 – 跟踪相关操作，捕获对象变得不可达的时刻，回收对 象占用的空间 • 传递地跟踪所有的引用 – 在需要时，标记出所有可达对象，回收其它对象 39 基于引用计数的垃圾回收器 • 每个对象有一个用于存放引用计数的字段，并按 如下方式维护 – 对象分配：引用计数设为1 – 参数传递：引用计数加1 – 引用赋值：u = v，u指向的对象引用减1，v指向的对象 引用加1 – 过程返回：局部变量指向对象的引用计数减1 • 如果一个对象的引用计数为0，在删除对象之前， 此对象中各个指针所指对象的引用计数减1 • 开销较大，但不会引起停顿，也能及时回收垃圾 40 引用计数的例子 • 考虑如下操作 – Y = X – Y是当前函数f的局部 变量，且f返回 • 修改计数后总是考虑 是否释放 • 释放一个对象之前总 是先处理对象内部的 指针 41 循环垃圾的例子 • 三个对象相互引用，没有来自外部的指针，又不 是根集成员，都是垃圾，但是引用计数都大于0 42 基于跟踪的垃圾回收 • 不在垃圾产生时回收，而是周期性地运行 • 标记-清扫式垃圾回收 • 标记并压缩垃圾回收 • 拷贝垃圾回收 43 标记-清扫式垃圾回收 • 标记-清扫式 (mark-and-sweep)： – 一种直接的全面停顿的算法 • 分成两个阶段 – 标记：从根集开始，跟踪并标记出所有的可达对象 – 清扫：遍历整个堆区，释放不可达对象 • 如果把数据对象看作顶点，引用看作有向边，那 么标记的过程实际上是从根集开始的图遍历过程 44 回收算法 45 垃圾回收 机制可以 知道每个 数据对象 的类型， 以及这个 对象有哪 些字段是 指针 例子 • 假设 – X是全局变量 – Y是当前函数的局 部变量 • 函数返回后进行标 记清扫 – A, D, E, F, G, H, I 可达 – B, C不可达 46 全局 局部 基本抽象分类 • 每个存储块处于四种 状态之一 – 空闲、未被访问、待 扫描、已扫描 • 对存储块的操作会改 变存储块的状态 – 应用程序分配 – 垃圾回收器扫描 – 回收 47 Reached = 0 Unscanned Reached = 0 Reached = 1 Reached = 0 Free Free Scanned Scanned 标记并压缩垃圾回收 • 标记并压缩回收器 (mark-and-compact collector) – 对可达对象进行重新定位 (relocating) 可消除存储碎片 • 把可达对象移动到堆区的一端，另一端则是空闲空间 • 空闲空间合并成单一块，提高分配内存时的效率 • 整个过程分成三个步骤 – 标记 – 计算新位置 – 移动并设置新的引用 48 回收算法 49 ) { 低 拷贝垃圾回收 • 堆空间被分为两个半空间 (semispace) – 应用程序在某个半空间内分配存储，当充满这个半空 间时，开始垃圾回收 – 回收时，可达对象被拷贝到另一个半空间 – 回收完成后，两个半空间角色对调 • 优点：不涉及任何不可达对象 • 缺点：必须移动所有可达对象 50 开销的比较 • 标记-清扫式垃圾回收 – 与堆区中存储块的数目成正比 • 标记并压缩垃圾回收 – 与堆区中存储块的数目和可达对象的总大小成正比 • 拷贝垃圾回收 – 与可达对象的总大小成正比 51","libVersion":"0.3.2","langs":""}