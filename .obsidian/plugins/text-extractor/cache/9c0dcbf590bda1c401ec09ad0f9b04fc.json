{"path":"docs/学校课程/归档课程/大数据/课件/13 NoSQL数据库.pdf","text":"NoSQL数据库 摘要 p NoSQL简介 p NoSQL与RDBMS p NoSQL的四大类型 p NoSQL的三大基石 p 从NoSQL到NewSQL p 国产数据库 2 摘要 p NoSQL简介 p NoSQL与RDBMS p NoSQL的四大类型 p NoSQL的三大基石 p 从NoSQL到NewSQL p 国产数据库 3 SQL和RDBMS ¨ SQL (Structured Query Language：结构化查询语言) 用于管理关系数据库管理系 统（RDBMS）。 SQL 的范围包括数据插入、查询、更新和删除，数据库模式 创建和修改，以及数据访问控制。 ¤ DDL，DML，DCL ¨ RDBMS 指关系型数据库管理系统，全称 Relational Database Management System，是创建在关系模型基础上的数据库，借助于集合代数等数学概念和方 法来处理数据库中的数据。现实世界中的各种实体以及实体之间的各种联系均 用关系模型来表示。 ¨ RDBMS 是 SQL 的基础，同样也是所有现代数据库系统的基础，比如 MS SQL Server、IBM DB2、Oracle、MySQL 以及 Microsoft Access。 4 ACID ¨ 一个数据库事务具有ACID四性： l A（Atomicity）：原子性，是指事务必须是原子工作单元，对于其数据修改， 要么全都执行，要么全都不执行。 l C（Consistency）：一致性，是指事务在完成时，必须使所有的数据都保持一 致状态。 l I（Isolation）：隔离性，是指由并发事务所做的修改必须与任何其它并发事务 所做的修改隔离。 l D（Durability）：持久性，是指事务完成之后，它对于系统的影响是永久性的， 该修改即使出现致命的系统故障也将一直保持。 5 关系型数据库 ¨ 科德(Edgar F. Codd)十二定律(Codd’s 12 rules) ¤ 使数据库管理系统关系化需满足的十三条准则（0-12），又称黄金十二定律。 ¨ 标准的RDBMS是模式固定、面向行的数据库且具有ACID性质和复杂的SQL查询 处理引擎。 ¨ RDBMS强调事务的“强一致性”、参照完整性、数据抽象与物理存储相对独立， 以及基于SQL语言的复杂查询支持。 ¨ RDBMS可以非常容易建立二级索引，执行复杂的内连接和外连接，执行计数、 求和、排序、分组等操作，或对表、行和列中的数据进行分页存放。 6 关系型数据库 ¨ RDBMS实现和操作上的局限性 ¤ 大表 —— 在一张表中存储500GB的数据？=> 效率低 ¤ 灵活动态可变的表结构 —— 为大表修改表结构(Alter Table)？=> 非常 复杂 ¤ 无停机时间的在线大表分区和动态扩容 => 不支持 7 NoSQL简介 ¨ NoSQL = Not Only SQL：不仅仅是SQL ¨ 泛指非关系型数据库 ¨ 所谓NoSQL，即放松了对传统数据库ACID事务处理特征和数据高度 结构化的要求，以简化设计、提高数据存储管理的灵活性、提高处 理性能、支持良好的水平扩展。 8 最初表示“ 反SQL” 运动 用新型的非关系数据库取代关系数据库 N o t o n l y SQL 现在表示关系和非关系型数据库各有优缺点 彼此都无法互相取代 概念演变 NoSQL兴起的原因 1、关系型数据库已经无法满足 Web2.0的需求。主要表现在以下 几个方面： ¤ 无法满足海量数据的管理需 求 ¤ 无法满足数据高并发的需求 ¤ 无法满足高可扩展性和高可 用性的需求 9 https://www.domo.com/learn/infographic/data-never-sleeps-9 Data Never Sleep NoSQL兴起的原因 10 •复杂性：部署、管理、配置很复杂 •数据库复制：MySQL主备之间采用复制方式，只能 是异步复制，当主库压力较大时可能产生较大延迟， 主备切换可能会丢失最后一部分更新事务，这时往往 需要人工介入，备份和恢复不方便 •扩容问题：如果系统压力过大需要增加新的机器， 这个过程涉及数据重新划分，整个过程比较复杂，且 容易出错 •动态数据迁移问题：如果某个数据库组压力过大， 需要将其中部分数据迁移出去，迁移过程需要总控节 点整体协调，以及数据库节点的配合。这个过程很难 做到自动化 MySQL集群是否可以完全解决问题？ NoSQL兴起的原因 2、“One size fits all”模式很难适用于截然不同的业务场景 ¤ 关系模型作为统一的数据模型既被用于数据分析，也被用于在线 业务。但这两者一个强调高吞吐，一个强调低延时，已经演化出 完全不同的架构，用同一套模型来抽象显然是不合适的。 n Hadoop针对数据分析 n MongoDB、Redis针对在线业务，两者都抛弃了关系模型 11 NoSQL兴起的原因 3、关系型数据库的关键特性包括完善的事务机制和高效的查询机制。 但是，关系型数据库引以为傲的两个关键特性，到了Web2.0时代却 成了鸡肋，主要表现在以下几个方面： ¤ Web2.0网站系统通常不要求严格的数据库事务； ¤ Web2.0并不要求严格的读写实时性； ¤ Web2.0通常不包含大量复杂的SQL查询（去结构化，存储空间换 取更好的查询性能）。 12 摘要 p NoSQL简介 p NoSQL与RDBMS p NoSQL的四大类型 p NoSQL的三大基石 p 从NoSQL到NewSQL p 国产数据库 13 NoSQL与RDBMS ¨ 关系型数据库 ¤ 优势：以完善的关系代数理论作为基础，有严格的标准，支持事务ACID四性，借助索引机 制可以实现高效的查询 ¤ 劣势：可扩展性较差，无法较好支持海量数据存储，数据模型过于死板、无法较好支持 Web2.0应用，事务机制影响了系统的整体性能等 ¨ NoSQL数据库 ¤ 优势：可以支持超大规模数据存储，灵活的数据模型可以很好地支持Web2.0应用，具有强 大的横向扩展能力等 ¤ 劣势：缺乏数学理论基础，复杂查询性能不高，大都不能实现事务强一致性，很难实现数 据完整性 14 NoSQL与RDBMS 15 比较标准 RDBMS NoSQL 备注 数据库原理 完全支持 部分支持 RDBMS有关系代数理论作为基础 NoSQL没有统一的理论基础 数据规模 大 超大 RDBMS很难实现横向扩展，纵向扩展的空间也比较有限，性能会随着 数据规模的增大而降低 NoSQL可以很容易通过添加更多设备来支持更大规模的数据 数据库模式 固定 灵活 RDBMS需要定义数据库模式，严格遵守数据定义和相关约束条件 NoSQL不存在数据库模式，可以自由灵活定义并存储各种不同类型的数 据 查询效率 快 可以实现高效的简 单查询，但是不具 备高度结构化查询 等特性，复杂查询 的性能不尽人意 RDBMS借助于索引机制可以实现快速查询（包括记录查询和范围查询） 很多NoSQL数据库没有面向复杂查询的索引，虽然NoSQL可以使用 MapReduce 来加速查询 ， 但是 ， 在复杂查询方面的性能仍然不如 RDBMS NoSQL与RDBMS 16 比较标准 RDBMS NoSQL 备注 一致性 强一致性 弱一致性 RDBMS严格遵守事务ACID模型，可以保证事务强一致性 很多NoSQL数据库放松了对事务ACID四性的要求，而是遵守BASE模型， 只能保证最终一致性 数据完整性 容易实现 很难实现 任何一个RDBMS都可以很容易实现数据完整性，比如通过主键或者非空约 束来实现实体完整性，通过主键、外键来实现参照完整性，通过约束或者 触发器来实现用户自定义完整性 但是，在NoSQL数据库却无法实现 扩展性 一般 好 RDBMS很难实现横向扩展，纵向扩展的空间也比较有限 NoSQL在设计之初就充分考虑了横向扩展的需求，可以很容易通过添加廉 价设备实现扩展 可用性 好 很好 RDBMS在任何时候都以保证数据一致性为优先目标，其次才是优化系统性 能，随着数据规模的增大，RDBMS为了保证严格的一致性，只能提供相对 较弱的可用性 大多数NoSQL都能提供较高的可用性 NoSQL与RDBMS 17 比较标准 RDBMS NoSQL 备注 标准化 是 否 RDBMS已经标准化（SQL） NoSQL还没有行业标准，不同的NoSQL数据库都有自己的查询语言， 很难规范应用程序接口 StoneBraker认为：NoSQL缺乏统一查询语言，将会拖慢NoSQL发展 技术支持 高 低 RDBMS经过几十年的发展，已经非常成熟，Oracle等大型厂商都可以 提供很好的技术支持 NoSQL在技术支持方面仍然处于起步阶段，还不成熟，缺乏有力的技 术支持 可维护性 复杂 复杂 RDBMS需要专门的数据库管理员(DBA)维护 NoSQL数据库虽然没有DBMS复杂，也难以维护 NoSQL与RDBMS ¨ 关系型数据库和NoSQL数据库各有优缺点，彼此无法取代 ¤ 关系型数据库应用场景：电信、银行等领域的关键业务系统，需 要保证强事务一致 ¤ NoSQL数据库应用场景：互联网企业、传统企业的非关键业务 （比如数据分析） 18 NoSQL与RDBMS ¨ 采用混合架构 • 案例：亚马逊公司使用不同类型的数据库来支撑它的电子商务应 用 • 对于“购物篮”这种临时性数据，采用键值存储会更加高效； • 当前的产品和订单信息则适合存放在关系型数据库中； • 大量的历史订单信息则适合保存在类似MongoDB的文档数据库中。 19 摘要 p NoSQL简介 p NoSQL与RDBMS p NoSQL的四大类型 p NoSQL的三大基石 p 从NoSQL到NewSQL p 国产数据库 20 常见的NoSQL数据库 21 类型 部分代表 特点 列存储 HBase; Cassandra; Hypertable 顾名思义，是按列存储数据的。最大的特点是方便存储结构化和半结构化数 据，方便做数据压缩，对针对某一列或者某几列的查询有非常大的I/O优势。 文档存储 MongoDB; CouchDB 文档存储一般用类似json的格式存储，存储的内容是文档型的。这样也就有 机会对某些字段建立索引，实现关系数据库的某些功能。 key-value存 储 Tokyo Cabinet / Tyrant Berkeley DB; MemcacheDB; Redis 可以通过key快速查询到其value。一般来说，存储不管value的格式，照单 全收。（Redis包含了其他功能） 图存储 Neo4J; FlockDB 图形关系的最佳存储。使用传统关系数据库来解决的话性能低下，而且设计 使用不方便。 对象存储 db4o; Versant 通过类似面向对象语言的语法操作数据库，通过对象的方式存取数据。 xml数据库 Berkeley DB XML; BaseX 高效的存储XML数据，并支持XML的内部查询语法，比如XQuery, Xpath。 NoSQL的四大类型 22 Key_1 Key_2 Key_3 Key_4 Key_5 Key_6 Key_7 Key_8 Val ue_1 Val ue_2 Val ue_1 Val ue_3 Val ue_2 Val ue_1 Val ue_4 Val ue_3 键值数据库 Col umn Name- 3 Col umn Val ue- 3 Col umn Name- 2 Col umn Val ue- 2 Col umn Name- 1 Col umn Val ue- 1 Col umn Name- 4 Col umn Val ue- 4 Col umn Name- 5 Col umn Val ue- 5 Col umn Name- 6 Col umn Val ue- 6 Dat aset Col umn- Fami l y- 1 Col umn- Fami l y- 2 Col umn- Fami l y- 1 Row Key- 1 Row Key- 2 列族数据库 ¨ 典型的NoSQL数据库通常包括键值数据库、列族数据库、文档数据 库和图形数据库。 NoSQL的四大类型 23 Key- Val ue Node1 Key- Val ue Node2 Key- Val ue Node3 Key- Val ue1 Key- Val ue2 Key- Val ue2Key- Val ue1 图形数据库 Dat aset Document _i d- 1 Document _i d- 2 Document _i d- 3 Document _i d- 4 Document - 1 Document - 2 Document - 3 Document - 4 文档数据库 键值数据库 24 相关产品 Redis、Riak、SimpleDB、Chordless、Scalaris、Memcached 数据模型 键/值对 键是一个字符串对象 值可以是任意类型的数据，比如整型、字符型、数组、列表、集合等 典型应用 涉及频繁读写、拥有简单数据模型的应用 内容缓存，比如会话、配置文件、参数、购物车等 存储配置和用户数据信息的移动应用 优点 扩展性好，灵活性好，大量写操作时性能高 缺点 无法存储结构化信息，条件查询效率较低 不适用情形 不是通过键而是通过值来查：键值数据库根本没有通过值查询的途径 需要存储数据之间的关系：在键值数据库中，不能通过两个或两个以上的键来关联数据 需要事务的支持：在一些键值数据库中，产生故障时，不可以回滚 使用者 百度云数据库（Redis）、GitHub（Riak）、BestBuy（Riak）、Twitter（Redis和 Memcached）、StackOverFlow（Redis）、Instagram （Redis）、Youtube（Memcached）、 Wikipedia（Memcached） 键值数据库 25 键值数据库成为理想的缓冲层解决方案 Redis有时候会被人们称为“强化版的Memcached” 支持持久化、数据恢复、更多数据类型 列族数据库 26 相关产品 BigTable、HBase、Cassandra、GreenPlum、PNUTS 数据模型 列族 典型应用 分布式数据存储与管理 数据在地理上分布于多个数据中心的应用程序 可以容忍副本中存在短期不一致情况的应用程序 拥有动态字段的应用程序 拥有潜在大量数据的应用程序，大到几百TB的数据 优点 查找速度快，可扩展性强，容易进行分布式扩展，复杂性低 缺点 功能较少，大都不支持强事务一致性 不适用情形 需要ACID事务支持的情形，Cassandra等产品就不适用 使用者 Ebay（Cassandra）、Instagram（Cassandra）、NASA（Cassandra）、Twitter（Cassandra and HBase）、Facebook（HBase）、Yahoo!（HBase） 文档数据库 27 “文档”其实是一个数据记录，这个记录能够对包含的数据类型和内容进行“自我描述”。XML文档、 HTML文档和JSON 文档就属于这一类。SequoiaDB就是使用JSON格式的文档数据库，它的存储的数 据是这样的： 关系数据库： 必须有schema信息才能理解数据的含义 学生（学号，姓名，性别，年龄，系，年级） （1001，张三，男，20，计算机，2002） 一个!\"#文档： $%&'()*+,-.)&'/ $0,&01,.2/ $'-31/45-617,&&.8),$9'-31/ $:-;+1/48(6<99;&%-;4&6.<=>>>945-61$9:-;+1/ $90,&01,.2/? $9%&'()*+,-.)&'/ 文档数据库 28 •数据是不规则的，每一条记录包含了所有的有关“SequoiaDB”的信息而没有任何外部的引用，这 条记录就是“自包含”的 •这使得记录很容易完全移动到其他服务器，因为这条记录的所有信息都包含在里面了，不需要考 虑还有信息在别的表没有一起迁移走 •同时，因为在移动过程中，只有被移动的那一条记录（文档）需要操作，而不像关系型中每个有 关联的表都需要锁住来保证一致性，这样一来ACID的保证就会变得更快速，读写的速度也会有很 大的提升 文档数据库 29 相关产品 MongoDB、CouchDB、Terrastore、ThruDB、RavenDB、SisoDB、RaptorDB、CloudKit、 Perservere、Jackrabbit 数据模型 键/值 值（value）是版本化的文档 典型应用 存储、索引并管理面向文档的数据或者类似的半结构化数据 比如，用于后台具有大量读写操作的网站、使用JSON数据结构的应用、使用嵌套结构等非规范化 数据的应用程序 优点 性能好（高并发），灵活性高，复杂性低，数据结构灵活 提供嵌入式文档功能，将经常查询的数据存储在同一个文档中 既可以根据键来构建索引，也可以根据内容构建索引 缺点 缺乏统一的查询语法 不适用情形 在不同的文档上添加事务。文档数据库并不支持文档间的事务，如果对这方面有需求则不应该选 用这个解决方案 使用者 百度云数据库（MongoDB）、SAP （MongoDB）、Codecademy （MongoDB）、Foursquare （MongoDB）、NBC News （RavenDB） 图形数据库 30 相关产品 Neo4J、OrientDB、InfoGrid、Infinite Graph、GraphDB 数据模型 图结构 典型应用 专门用于处理具有高度相互关联关系的数据，比较适合于社交网络、模式识别、依赖分析、 推荐系统以及路径寻找等问题 优点 灵活性高，支持复杂的图形算法，可用于构建复杂的关系图谱 缺点 复杂性高，只能支持一定的数据规模 使用者 Adobe（Neo4J）、Cisco（Neo4J）、T-Mobile（Neo4J） 不同类型数据库比较分析 31 •MySQL产生年代较早，而且随着LAMP大潮得以成熟。尽管其没有什么大的改进，但是新兴的互联网 使用的最多的数据库。 •MongoDB是个新生事物，提供更灵活的数据模型、异步提交、地理位置索引等五花十色的功能。 •HBase是个“仗势欺人”的大象兵。依仗着Hadoop的生态环境，可以有很好的扩展性。但是就像象 兵一样，使用者需要养一头大象(Hadoop)才能驱使他。 •Redis是键值存储的代表，功能最简单。提供随机数据存储。就像一根棒子一样，没有多余的构造。 但是也正是因此，它的伸缩性特别好。就像悟空手里的金箍棒，大可捅破天，小能成缩成针。 摘要 p NoSQL简介 p NoSQL与RDBMS p NoSQL的四大类型 p NoSQL的三大基石 p 从NoSQL到NewSQL p 国产数据库 32 NoSQL的三大基石 33 NoSQL CAP BASE 最终一 致性 CAP定理 ¨ 在计算机科学中，CAP定理（CAP theorem），又被称作布鲁尔定理（Brewer‘s theorem），它指出对于一个分布式计算系统来说，不可能同时满足以下三点: ¤ 一致性(Consistency)：是指任何一个读操作总是能够读到之前完成的写操作的结果，也就 是在分布式环境中，多点的数据是一致的，或者说，所有节点在同一时间具有相同的数据； ¤ 可用性(Availability)：是指快速获取数据，可以在确定的时间内返回操作结果，保证每个请 求不管成功或者失败都有响应； ¤ 分隔容忍(Partition tolerance) ：分区容忍性，是指当出现网络分区的情况时（即系统中的一 部分节点无法和其他节点进行通信），分离的系统也能够正常运行，也就是说，系统中任 意信息的丢失或失败不会影响系统的继续运作。 34 CAP定理 ¨ CAP理论的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和 分区容错性这三个需求，最多只能同时较好的满足两个。 35 CAP ¨ 以牺牲一致性来换取可用性的实例 36 （a）初始状态 P1 M1 P2 M2 V1=val0 V2=val0 CAP ¨ 以牺牲一致性来换取可用性的实例 37 （b）正常执行过程 P1 M1 V1=val 0 val1 P2 M2 1 2 3 P1 M1 传播新值val1 P2 M2 P1 M1 P2 M2 val1 V2=val0 V1=val1 V2=val0 V1=val 1 V2=val1 进程P1把副本V1的值从 val 0更新为val1 副本V1的新值val1被传播 给副本V2 进程P2从副本V2中读取到 更新后的值val1 CAP ¨ 以牺牲一致性来换取可用性的实例 38 P1 M1 V1=val0 val1 P2 M2 1 2 3 P1 M1 传播新值val1失败 P2 M2 P1 M1 P2 M2 val0 V2=val0 V1=val1 V2=val0 V1=val1 V2=val0 进程P1把副本V1的值从 val0更新为val1 副本V1的新值val1无法传 播到副本V2 进程P2从副本V2中依然 读取旧值val0 (c) 更新传播失败时的执行过程 CAP 1. CA：也就是强调一致性（C）和可用性（A），放弃分区容忍性（P），最简单 的做法是把所有与事务相关的内容都放到同一台机器上。很显然，这种做法会严 重影响系统的可扩展性。传统的关系数据库（MySQL、SQL Server和 PostgreSQL），都采用了这种设计原则，因此扩展性都比较差。 2. CP：也就是强调一致性（C）和分区容忍性（P），放弃可用性（A），当出现 网络分区的情况时，受影响的服务需要等待数据一致，因此在等待期间就无法对 外提供服务。 3. AP：也就是强调可用性（A）和分区容忍性（P），放弃一致性（C），允许系 统返回不一致的数据。 39 BASE ¨ BASE：Basically Available, Soft-state, Eventually Consistent。由 Eric Brewer 定义。 ¨ BASE是NoSQL数据库通常对可用性及一致性的弱要求原则: ¤ Basically Available：基本可用。 ¤ Soft-state ：软状态/柔性事务。 “Soft state” 可以理解为“无连接”的，而 “Har d state” 是“面向连接”的。 ¤ Eventual Consistency ：最终一致性。最终一致性， 也是 ACID 的最终目的。 40 ACID vs. BASE ¨ ACID ¤ 原子性(Atomicity) ¤ 一致性(Consistency) ¤ 隔离性(Isolation) ¤ 持久性(Durable) ¨ BASE ¤ 基本可用(Basic Available) ¤ 软状态/柔性事务(Soft state) ¤ 最终一致性(Eventual consistency) 41 BASE ¨ BASE的基本含义是基本可用、软状态和最终一致性： l 基本可用 l 基本可用，是指一个分布式系统的一部分发生问题变得不可用时，其他部分仍然可以正常 使用，也就是允许分区失败的情形出现。 l 软状态 l “软状态（soft-state）”是与“硬状态（hard-state）”相对应的一种提法。数据库保存的 数据是“硬状态”时，可以保证数据一致性，即保证数据一直是正确的。“软状态”是指 状态可以有一段时间不同步，具有一定的滞后性。 42 BASE ¨ 最终一致性 ¤ 一致性的类型包括强一致性和弱一致性，二者的主要区别在于高并发的数据访问操作下， 后续操作是否能够获取最新的数据。对于强一致性而言，当执行完一次更新操作后，后续 的其他读操作就可以保证读到更新后的最新数据；反之，如果不能保证后续访问读到的都 是更新后的最新数据，那么就是弱一致性。而最终一致性只不过是弱一致性的一种特例， 允许后续的访问操作可以暂时读不到更新后的数据，但是经过一段时间之后，必须最终读 到更新后的数据。 ¤ 最常见的实现最终一致性的系统是DNS（域名系统）。一个域名更新操作根据配置的形式 被分发出去，并结合有过期机制的缓存；最终所有的客户端可以看到最新的值。 最终一致性 ¨ 最终一致性根据更新数据后各进程访问到数据的时间和方式的不同， 又可以区分为： ¤ 因果一致性：如果进程A通知进程B它已更新了一个数据项，那么进程B的后 续访问将获得A写入的最新值。而与进程A无因果关系的进程C的访问，仍然 遵守一般的最终一致性规则。 ¤ “读己之所写”一致性：可以视为因果一致性的一个特例。当进程A自己执 行一个更新操作之后，它自己总是可以访问到更新过的值，绝不会看到旧 值。 ¤ 单调读一致性：如果进程已经看到过数据对象的某个值，那么任何后续访 问都不会返回在那个值之前的值。 44 最终一致性 ¨ 最终一致性根据更新数据后各进程访问到数据的时间和方式的不同， 又可以区分为： ¤ 会话一致性：它把访问存储系统的进程放到会话（session）的上下文中，只 要会话还存在，系统就保证“读己之所写”一致性。如果由于某些失败情 形令会话终止，就要建立新的会话，而且系统保证不会延续到新的会话。 ¤ 单调写一致性：系统保证来自同一个进程的写操作顺序执行。系统必须保 证这种程度的一致性，否则就非常难以编程了。 45 最终一致性 ¨ 如何实现各种类型的一致性？ ¨ 对于分布式数据系统： ¤ N — 数据复制的份数 ¤ W — 更新数据时需要保证写完成的节点数 ¤ R — 读取数据的时候需要读取的节点数 46 最终一致性 ¤ 如果W+R>N，写的节点和读的节点重叠，则是强一致性。例如对于 典型的一主一备同步复制的关系型数据库，N=2,W=2,R=1，则不管读 的是主库还是备库的数据，都是一致的。一般设定是R＋W = N+1， 这是保证强一致性的最小设定。 ¤ 如果W+R<=N，则是弱一致性。例如对于一主一备异步复制的关系型 数据库，N=2,W=1,R=1，则如果读的是备库，就可能无法读取主库已 经更新过的数据，所以是弱一致性。 47 最终一致性 ¤ 对于分布式系统，为了保证高可用性，一般设置N>=3。不同的N,W,R 组合，是在可用性和一致性之间取一个平衡，以适应不同的应用场景。 ¤ 如果N=W,R=1，任何一个写节点失效，都会导致写失败，因此可用性 会降低，但是由于数据分布的N个节点是同步写入的，因此可以保证 强一致性。 ¤ 实例：HBase是借助其底层的HDFS来实现其数据冗余备份的。HDFS采 用的就是强一致性保证。在数据没有完全同步到N个节点前，写操作 是不会返回成功的。也就是说它的W＝N，而读操作只需要读到一个 值即可，也就是说它R＝1。 最终一致性 p 像Voldemort，Cassandra和Riak这些类Dynamo的系统，通常都允 许用户按需要设置N，R，W三个值，即使是设置成W＋R<= N也 是可以的。也就是说他允许用户在强一致性和最终一致性之间自 由选择。而在用户选择了最终一致性，或者是W<N的强一致性 时，则总会出现一段“各个节点数据不同步导致系统处理不一致 的时间”。为了提供最终一致性的支持，这些系统会提供一些工 具来使数据更新被最终同步到所有相关节点。 RDBMS vs. NoSQL ¨ RDBMS ¤ 高度组织化结构化数据 ¤ 结构化查询语言SQL ¤ 数据和关系存储在单独的表中 ¤ 数据操纵语言，数据定义语言 ¤ 严格的一致性 ¤ 基础事务 ¨ NoSQL ¤ 代表着不仅仅是SQL ¤ 没有声明性查询语言 ¤ 没有预定义的模式 ¤ 键-值对存储，列存储，文档存储，图 形数据库 ¤ 最终一致性，而非ACID属性 ¤ 非结构化和不可预知的数据 ¤ CAP定理 ¤ 高性能、高可用和可伸缩性 50 NoSQL ¨ 优点 ¤ 高可扩展 ¤ 分布式计算 ¤ 低成本 ¤ 架构灵活 ¤ 半结构化数据 ¤ 没有复杂的关系 ¨ 缺点 ¤ 没有标准化 ¤ 有限的查询功能 ¤ 最终一致是不直观的程序 51 摘要 p NoSQL简介 p NoSQL与RDBMS p NoSQL的四大类型 p NoSQL的三大基石 p 从NoSQL到NewSQL p 国产数据库 52 从NoSQL到NewSQL数据库 ¨ NewSQL：对各种新的可扩展、高性能数据库的简称。 ¤ 具有NoSQL对海量数据的存储管理能力； ¤ 保持传统数据库支持ACID和SQL等特性，都支持关系数据模型，都使 用SQL作为其主要的接口。 53 Old SQL NoSQL NewSQL 关系模型 Yes No Yes SQL语句 Yes No Yes ACID Yes No Yes 水平扩展 No Yes Yes 大数据 No Yes Yes 无结构化 No Yes No 从NoSQL到NewSQL数据库 54 Ol dSQL 分析 事务 互联网 一种架构支持多类应用 （One Si ze Fi t s Al l ） NewSQL 分析 Ol dSQL 事务 NoSQL 互联网 大数据时代 架构多元化 多架构支持多类应用 大数据引发数据处理架构变革 从NoSQL到NewSQL数据库 55 关系型数据库 NoSQL 文档数据库 键值 数据库 BigTable 图数据库 云数据库 NewSQL Infobright Netezza ParAccel SAP Sybase IQ Teradata EMC Calpont IBM InfoSphere Aster Data Greenplum VectorWise HP Vertica Oracle IMB DB2 SQL Server JustOne CouchDB MongoDB RavenDB Hypertable HBase Riak Redis Membrain Voldemort BekeleyDB Cassandra Couchbase Cloudant App Engine Datastore SimpleDB InfiniteGraph GraphDB Neo4J MySQL Ingres PostgreSQL HandlerSocket Amazon RDS SQL Azure Database.com FathomDB Xeround Akiban MySQL Cluster Clustrix Drizzle GenieDB ScalArc Schooner MySQL CodeFutures Tokutek ScaleBase NimbusDB Continuent VoltDB Translattice 列式数据库 OldSQL OrientDB 关系数据库、NoSQL和NewSQL数据库产品分类图 摘要 p NoSQL简介 p NoSQL与RDBMS p NoSQL的四大类型 p NoSQL的三大基石 p 从NoSQL到NewSQL p 国产数据库 56 2023年国产数据库软件排行榜 2023年10月 墨天轮中国数据库流行度排行 2023年国产数据库软件排行榜2023年国产数据库软件排行榜 THANK YOU","libVersion":"0.3.2","langs":""}